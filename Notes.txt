Editeurs pour CHE :
https://github.com/che-incubator/che-code
https://github.com/che-incubator/jetbrains-editor-images

Exemple Devfile registry (python) :
https://registry.devfile.io/viewer/devfiles/Community+python

ODO.dev : https://odo.dev/docs/development/devfile#full-example-5


vscode :
- pour utiliser Jupyter de Microsoft AI dans VSCODE, il faut passer par che-code insiders, pas par Theia.

- il faut empecher mise à jour de l'extension built-in "ipynb" de che-code, sinon les jupyter notebooks ne marcheront plus.
- le parametre de mise à jour auto des extensions est géré dans le settings.json du User. Or celui-ci est stocké par che-code dans le navigateur (voir Outils de dev). Conséquence : pour éviter mise à jour auto, on change l'emplacement URL du marketplace des extensions che-code (via Dockerfile & product.json).

- on préinstalle les extensions che-code via Dockerfile

- pour les devfile :
	- il n'est pas possible d'utiliser dans devfile API v2 les components "kubernetes" inline avec DevWorkspace operator, pas encore implémenté. Conséquence, on ne peut pas assigner de GPU à un Workspace CHE.
Alternative : dans che-code utiliser un serveur jupyter notebook distant qui lui est sur un POD avec GPU

	- dans devfile API v2 de DevWorkspace operator, on peut juste utiliser components/container.
	- avec ODO v3, on peut utiliser devfile API v2 components/kubernetes inlined (par ex pour ajouter GPU) => le use case dans ce cas est pour le déploiement en PROD (processus ODO OUTERLOOP => chaine complete CI/CD pour déploiement sur cluster PROD). Le processus ODO INERLOOP = déploiement "localement" chez le Dev.
